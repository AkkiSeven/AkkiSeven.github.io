{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1388260.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) => \n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\n//\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport './Table.css';\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(0,0)}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType=\"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          console.log(chartData);\n\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries/\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States\n            value: country.countryInfo.iso2, // USA\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>C🦠VID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}